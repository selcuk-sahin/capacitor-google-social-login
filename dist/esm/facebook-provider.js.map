{"version":3,"file":"facebook-provider.js","sourceRoot":"","sources":["../../src/facebook-provider.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseSocialLogin } from './base';\nimport type { FacebookLoginOptions, FacebookLoginResponse, AuthorizationCode, LoginResult } from './definitions';\n\ndeclare const FB: {\n  init(options: any): void;\n  login(\n    callback: (response: { status: string; authResponse: { accessToken: string; userID: string } }) => void,\n    options?: { scope: string },\n  ): void;\n  logout(callback: () => void): void;\n  api(path: string, params: { fields: string }, callback: (response: any) => void): void;\n  getLoginStatus(callback: (response: { status: string; authResponse?: { accessToken: string } }) => void): void;\n};\n\nexport class FacebookSocialLogin extends BaseSocialLogin {\n  private appId: string | null = null;\n  private scriptLoaded = false;\n\n  async initialize(appId: string | null): Promise<void> {\n    this.appId = appId;\n\n    if (appId) {\n      await this.loadFacebookScript();\n      FB.init({\n        appId: this.appId,\n        version: 'v17.0',\n        xfbml: true,\n        cookie: true,\n      });\n    }\n  }\n\n  async login(options: FacebookLoginOptions): Promise<LoginResult> {\n    if (!this.appId) {\n      throw new Error('Facebook App ID not set. Call initialize() first.');\n    }\n\n    return new Promise((resolve, reject) => {\n      FB.login(\n        (response) => {\n          if (response.status === 'connected') {\n            FB.api('/me', { fields: 'id,name,email,picture' }, (userInfo: any) => {\n              const result: FacebookLoginResponse = {\n                accessToken: {\n                  token: response.authResponse.accessToken,\n                  userId: response.authResponse.userID,\n                },\n                profile: {\n                  userID: userInfo.id,\n                  name: userInfo.name,\n                  email: userInfo.email || null,\n                  imageURL: userInfo.picture?.data?.url || null,\n                  friendIDs: [],\n                  birthday: null,\n                  ageRange: null,\n                  gender: null,\n                  location: null,\n                  hometown: null,\n                  profileURL: null,\n                },\n                idToken: null,\n              };\n              resolve({ provider: 'facebook', result });\n            });\n          } else {\n            reject(new Error('Facebook login failed'));\n          }\n        },\n        { scope: options.permissions.join(',') },\n      );\n    });\n  }\n\n  async logout(): Promise<void> {\n    return new Promise<void>((resolve) => {\n      FB.logout(() => resolve());\n    });\n  }\n\n  async isLoggedIn(): Promise<{ isLoggedIn: boolean }> {\n    return new Promise((resolve) => {\n      FB.getLoginStatus((response) => {\n        resolve({ isLoggedIn: response.status === 'connected' });\n      });\n    });\n  }\n\n  async getAuthorizationCode(): Promise<AuthorizationCode> {\n    return new Promise((resolve, reject) => {\n      FB.getLoginStatus((response) => {\n        if (response.status === 'connected') {\n          resolve({ jwt: response.authResponse?.accessToken || '' });\n        } else {\n          reject(new Error('No Facebook authorization code available'));\n        }\n      });\n    });\n  }\n\n  async refresh(options: FacebookLoginOptions): Promise<void> {\n    await this.login(options);\n  }\n\n  private async loadFacebookScript(): Promise<void> {\n    if (this.scriptLoaded) return;\n\n    return this.loadScript('https://connect.facebook.net/en_US/sdk.js').then(() => {\n      this.scriptLoaded = true;\n    });\n  }\n}\n"]}