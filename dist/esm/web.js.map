{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAE5C,OAAO,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AAcpD,OAAO,EAAE,mBAAmB,EAAE,MAAM,qBAAqB,CAAC;AAC1D,OAAO,EAAE,iBAAiB,EAAE,MAAM,mBAAmB,CAAC;AAEtD,MAAM,OAAO,cAAe,SAAQ,SAAS;IAO3C;;QACE,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,cAAc,GAAG,IAAI,iBAAiB,EAAE,CAAC;QAC9C,IAAI,CAAC,aAAa,GAAG,IAAI,gBAAgB,EAAE,CAAC;QAC5C,IAAI,CAAC,gBAAgB,GAAG,IAAI,mBAAmB,EAAE,CAAC;QAElD,sEAAsE;QACtE,IAAI,YAAY,CAAC,OAAO,CAAC,cAAc,CAAC,eAAe,CAAC,EAAE,CAAC;YACzD,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;YACrC,MAAM,MAAM,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC1C,IAAI,MAAM,EAAE,CAAC;gBACX,MAAA,MAAM,CAAC,MAAM,0CAAE,WAAW,iBAEtB,IAAI,EAAE,gBAAgB,IACnB,MAAM,CAAC,MAAM,GAElB,MAAM,CAAC,QAAQ,CAAC,MAAM,CACvB,CAAC;gBACF,MAAM,CAAC,KAAK,EAAE,CAAC;YACjB,CAAC;QACH,CAAC;IACH,CAAC;IAEO,mBAAmB;QACzB,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC1C,OAAO,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;IACtD,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,OAA0B;;QACzC,MAAM,YAAY,GAAoB,EAAE,CAAC;QAEzC,IAAI,MAAA,OAAO,CAAC,MAAM,0CAAE,WAAW,EAAE,CAAC;YAChC,YAAY,CAAC,IAAI,CACf,IAAI,CAAC,cAAc,CAAC,UAAU,CAC5B,OAAO,CAAC,MAAM,CAAC,WAAW,EAC1B,OAAO,CAAC,MAAM,CAAC,IAAI,EACnB,OAAO,CAAC,MAAM,CAAC,YAAY,EAC3B,OAAO,CAAC,MAAM,CAAC,WAAW,CAC3B,CACF,CAAC;QACJ,CAAC;QAED,IAAI,MAAA,OAAO,CAAC,KAAK,0CAAE,QAAQ,EAAE,CAAC;YAC5B,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;QACtG,CAAC;QAED,IAAI,MAAA,OAAO,CAAC,QAAQ,0CAAE,KAAK,EAAE,CAAC;YAC5B,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QAC9E,CAAC;QAED,MAAM,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IAClC,CAAC;IAED,KAAK,CAAC,KAAK,CACT,OAA+C;QAE/C,QAAQ,OAAO,CAAC,QAAQ,EAAE,CAAC;YACzB,KAAK,QAAQ;gBACX,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAA6D,CAAC;YAChH,KAAK,OAAO;gBACV,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAA6D,CAAC;YAC/G,KAAK,UAAU;gBACb,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,OAAO,CAAC,OAA+B,CAGxE,CAAC;YACL;gBACE,MAAM,IAAI,KAAK,CAAC,aAAa,OAAO,CAAC,QAAQ,4BAA4B,CAAC,CAAC;QAC/E,CAAC;IACH,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,OAAsD;QACjE,QAAQ,OAAO,CAAC,QAAQ,EAAE,CAAC;YACzB,KAAK,QAAQ;gBACX,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC;YACtC,KAAK,OAAO;gBACV,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;YACrC,KAAK,UAAU;gBACb,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC;YACxC;gBACE,MAAM,IAAI,KAAK,CAAC,cAAc,OAAO,CAAC,QAAQ,qBAAqB,CAAC,CAAC;QACzE,CAAC;IACH,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,OAA0B;QACzC,QAAQ,OAAO,CAAC,QAAQ,EAAE,CAAC;YACzB,KAAK,QAAQ;gBACX,OAAO,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC;YAC1C,KAAK,OAAO;gBACV,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC;YACzC,KAAK,UAAU;gBACb,OAAO,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,CAAC;YAC5C;gBACE,MAAM,IAAI,KAAK,CAAC,kBAAkB,OAAO,CAAC,QAAQ,qBAAqB,CAAC,CAAC;QAC7E,CAAC;IACH,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,OAAiC;QAC1D,QAAQ,OAAO,CAAC,QAAQ,EAAE,CAAC;YACzB,KAAK,QAAQ;gBACX,OAAO,IAAI,CAAC,cAAc,CAAC,oBAAoB,EAAE,CAAC;YACpD,KAAK,OAAO;gBACV,OAAO,IAAI,CAAC,aAAa,CAAC,oBAAoB,EAAE,CAAC;YACnD,KAAK,UAAU;gBACb,OAAO,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,EAAE,CAAC;YACtD;gBACE,MAAM,IAAI,KAAK,CAAC,4BAA4B,OAAO,CAAC,QAAQ,qBAAqB,CAAC,CAAC;QACvF,CAAC;IACH,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,OAAqB;QACjC,QAAQ,OAAO,CAAC,QAAQ,EAAE,CAAC;YACzB,KAAK,QAAQ;gBACX,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;YACvC,KAAK,OAAO;gBACV,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;YACtC,KAAK,UAAU;gBACb,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,OAA+B,CAAC,CAAC;YAChF;gBACE,MAAM,IAAI,KAAK,CAAC,eAAgB,OAAe,CAAC,QAAQ,qBAAqB,CAAC,CAAC;QACnF,CAAC;IACH,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAiC,OAG1D;QACC,MAAM,IAAI,KAAK,CAAC,8BAA8B,OAAO,CAAC,IAAI,qBAAqB,CAAC,CAAC;IACnF,CAAC;;AAvIuB,8BAAe,GAAG,4BAA4B,CAAC","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport { AppleSocialLogin } from './apple-provider';\nimport type {\n  SocialLoginPlugin,\n  InitializeOptions,\n  LoginOptions,\n  AuthorizationCode,\n  AuthorizationCodeOptions,\n  isLoggedInOptions,\n  ProviderResponseMap,\n  FacebookLoginOptions,\n  ProviderSpecificCall,\n  ProviderSpecificCallOptionsMap,\n  ProviderSpecificCallResponseMap,\n} from './definitions';\nimport { FacebookSocialLogin } from './facebook-provider';\nimport { GoogleSocialLogin } from './google-provider';\n\nexport class SocialLoginWeb extends WebPlugin implements SocialLoginPlugin {\n  private static readonly OAUTH_STATE_KEY = 'social_login_oauth_pending';\n\n  private googleProvider: GoogleSocialLogin;\n  private appleProvider: AppleSocialLogin;\n  private facebookProvider: FacebookSocialLogin;\n\n  constructor() {\n    super();\n\n    this.googleProvider = new GoogleSocialLogin();\n    this.appleProvider = new AppleSocialLogin();\n    this.facebookProvider = new FacebookSocialLogin();\n\n    // Set up listener for OAuth redirects if we have a pending OAuth flow\n    if (localStorage.getItem(SocialLoginWeb.OAUTH_STATE_KEY)) {\n      console.log('OAUTH_STATE_KEY found');\n      const result = this.handleOAuthRedirect();\n      if (result) {\n        window.opener?.postMessage(\n          {\n            type: 'oauth-response',\n            ...result.result,\n          },\n          window.location.origin,\n        );\n        window.close();\n      }\n    }\n  }\n\n  private handleOAuthRedirect() {\n    const url = new URL(window.location.href);\n    return this.googleProvider.handleOAuthRedirect(url);\n  }\n\n  async initialize(options: InitializeOptions): Promise<void> {\n    const initPromises: Promise<void>[] = [];\n\n    if (options.google?.webClientId) {\n      initPromises.push(\n        this.googleProvider.initialize(\n          options.google.webClientId,\n          options.google.mode,\n          options.google.hostedDomain,\n          options.google.redirectUrl,\n        ),\n      );\n    }\n\n    if (options.apple?.clientId) {\n      initPromises.push(this.appleProvider.initialize(options.apple.clientId, options.apple.redirectUrl));\n    }\n\n    if (options.facebook?.appId) {\n      initPromises.push(this.facebookProvider.initialize(options.facebook.appId));\n    }\n\n    await Promise.all(initPromises);\n  }\n\n  async login<T extends LoginOptions['provider']>(\n    options: Extract<LoginOptions, { provider: T }>,\n  ): Promise<{ provider: T; result: ProviderResponseMap[T] }> {\n    switch (options.provider) {\n      case 'google':\n        return this.googleProvider.login(options.options) as Promise<{ provider: T; result: ProviderResponseMap[T] }>;\n      case 'apple':\n        return this.appleProvider.login(options.options) as Promise<{ provider: T; result: ProviderResponseMap[T] }>;\n      case 'facebook':\n        return this.facebookProvider.login(options.options as FacebookLoginOptions) as Promise<{\n          provider: T;\n          result: ProviderResponseMap[T];\n        }>;\n      default:\n        throw new Error(`Login for ${options.provider} is not implemented on web`);\n    }\n  }\n\n  async logout(options: { provider: 'apple' | 'google' | 'facebook' }): Promise<void> {\n    switch (options.provider) {\n      case 'google':\n        return this.googleProvider.logout();\n      case 'apple':\n        return this.appleProvider.logout();\n      case 'facebook':\n        return this.facebookProvider.logout();\n      default:\n        throw new Error(`Logout for ${options.provider} is not implemented`);\n    }\n  }\n\n  async isLoggedIn(options: isLoggedInOptions): Promise<{ isLoggedIn: boolean }> {\n    switch (options.provider) {\n      case 'google':\n        return this.googleProvider.isLoggedIn();\n      case 'apple':\n        return this.appleProvider.isLoggedIn();\n      case 'facebook':\n        return this.facebookProvider.isLoggedIn();\n      default:\n        throw new Error(`isLoggedIn for ${options.provider} is not implemented`);\n    }\n  }\n\n  async getAuthorizationCode(options: AuthorizationCodeOptions): Promise<AuthorizationCode> {\n    switch (options.provider) {\n      case 'google':\n        return this.googleProvider.getAuthorizationCode();\n      case 'apple':\n        return this.appleProvider.getAuthorizationCode();\n      case 'facebook':\n        return this.facebookProvider.getAuthorizationCode();\n      default:\n        throw new Error(`getAuthorizationCode for ${options.provider} is not implemented`);\n    }\n  }\n\n  async refresh(options: LoginOptions): Promise<void> {\n    switch (options.provider) {\n      case 'google':\n        return this.googleProvider.refresh();\n      case 'apple':\n        return this.appleProvider.refresh();\n      case 'facebook':\n        return this.facebookProvider.refresh(options.options as FacebookLoginOptions);\n      default:\n        throw new Error(`Refresh for ${(options as any).provider} is not implemented`);\n    }\n  }\n\n  async providerSpecificCall<T extends ProviderSpecificCall>(options: {\n    call: T;\n    options: ProviderSpecificCallOptionsMap[T];\n  }): Promise<ProviderSpecificCallResponseMap[T]> {\n    throw new Error(`Provider specific call for ${options.call} is not implemented`);\n  }\n}\n"]}